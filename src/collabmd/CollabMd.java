
/*
 _____       _ _       _    ___  ________ 
/  __ \     | | |     | |   |  \/  |  _  \
| /  \/ ___ | | | __ _| |__ | .  . | | | |
| |    / _ \| | |/ _` | '_ \| |\/| | | | |
| \__/\ (_) | | | (_| | |_) | |  | | |/ / 
 \____/\___/|_|_|\__,_|_.__/\_|  |_/___/  
 			Created by Gama Sibusiso
						version 0.0.1
 */
package collabmd;

import gama.sv.Project;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class CollabMd extends javax.swing.JFrame {

	private static Project project;
	private static String exportText;

	public CollabMd() {
		initComponents();
		// Project.setRoot(System.getProperty("user.dir"));
		Project.setRoot(".");
		Project.setProjectName("");
		Project.init();
		processRecentFiles();
		live_edit = false;
		exportText = "";
		project = new Project();
	}

	public static Project getProject() {
		return project;
	}

	public void processRecentFiles() {
		String tmp = System.getProperty("java.io.tmpdir");
		String path = tmp.toString() + "/recent_files";
		Project.setTemp_dir(path);
		Project.createFileIfNotExist(path);

		System.out.println("Recent: " + path);
		String contents = Project.readFile(path);
		String[] lines = contents.split("\n");

		for (int i = 0; i < lines.length; i++) {
			String file = lines[i].trim();
			int index = file.indexOf(Project.getRoot() + "/");

			if (file.length() > 0) {
				JMenuItem item = new JMenuItem(file);
				menu_recent_files.add(item);

				item.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent ae) {
						File fileToOpen = new File(file);
						String name = fileToOpen.getName();
						String[] splits = name.split("\\+");

						String path = fileToOpen.getAbsolutePath();
						String title = splits[0];
						String author = "author";
						if (splits.length > 1) {
							author = splits[0];
							title = splits[1];
						}

						if (index > 0) {
							path = file.substring(index);
						}
						String contents = Project.readFile(path);
						Editor ed = new Editor(title, contents, path, author, Project.getExtension(path));
						ed.setBounds(desktop.getWidth() / 4, desktop.getHeight() / 4, ed.getWidth(), ed.getHeight());
						ed.setAction("Openned a file from project files window, from the recent files list");
						Project.addToProjectIfNotThere(path);
						desktop.add(ed);

						String recent = CollabMd.class.getResource("recent_files").getPath();
						Project.addPathToRecentFiles(recent, fileToOpen.getAbsolutePath());

					}
				});
			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jMenuItem14 = new javax.swing.JMenuItem();
    jMenu5 = new javax.swing.JMenu();
    jMenuItem19 = new javax.swing.JMenuItem();
    jToolBar1 = new javax.swing.JToolBar();
    tool_btn_new = new javax.swing.JButton();
    jSeparator6 = new javax.swing.JToolBar.Separator();
    tool_open_file = new javax.swing.JButton();
    tool_open_project = new javax.swing.JButton();
    jSeparator7 = new javax.swing.JToolBar.Separator();
    tool_save = new javax.swing.JButton();
    tool_save_as = new javax.swing.JButton();
    tool_save_all = new javax.swing.JButton();
    jSeparator8 = new javax.swing.JToolBar.Separator();
    jLabel2 = new javax.swing.JLabel();
    tf_project_name = new javax.swing.JTextField();
    jSeparator10 = new javax.swing.JToolBar.Separator();
    tool_build = new javax.swing.JButton();
    tool_run = new javax.swing.JButton();
    jSeparator9 = new javax.swing.JToolBar.Separator();
    tool_tree = new javax.swing.JButton();
    desktop = new javax.swing.JDesktopPane();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    menu_item_new_entity = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    jMenuItem2 = new javax.swing.JMenuItem();
    menu_item_open_file = new javax.swing.JMenuItem();
    jSeparator3 = new javax.swing.JPopupMenu.Separator();
    menu_recent_files = new javax.swing.JMenu();
    jSeparator2 = new javax.swing.JPopupMenu.Separator();
    menu_item_save = new javax.swing.JMenuItem();
    menu_item_save_as = new javax.swing.JMenuItem();
    menu_item_save_all = new javax.swing.JMenuItem();
    jSeparator4 = new javax.swing.JPopupMenu.Separator();
    menu_item_export_html = new javax.swing.JMenuItem();
    jSeparator5 = new javax.swing.JPopupMenu.Separator();
    menu_close = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    menu_item_project_files = new javax.swing.JMenuItem();
    menu_item_project_info = new javax.swing.JMenuItem();
    jMenu6 = new javax.swing.JMenu();
    jMenuItem18 = new javax.swing.JMenuItem();
    menu_item_run = new javax.swing.JMenuItem();
    jMenu7 = new javax.swing.JMenu();
    jMenu8 = new javax.swing.JMenu();
    menu_item_live_edit = new javax.swing.JCheckBoxMenuItem();
    jMenu4 = new javax.swing.JMenu();
    menu_item_minimize_all = new javax.swing.JMenuItem();
    menu_item_restore_all = new javax.swing.JMenuItem();
    jSeparator11 = new javax.swing.JPopupMenu.Separator();
    menu_item_close_editors = new javax.swing.JMenuItem();
    menu_item_close_previews = new javax.swing.JMenuItem();
    menu_item_close_files = new javax.swing.JMenuItem();
    jSeparator12 = new javax.swing.JPopupMenu.Separator();
    menu_item_close_active = new javax.swing.JMenuItem();
    jMenu9 = new javax.swing.JMenu();
    menu_item_about = new javax.swing.JMenuItem();

    jMenuItem14.setText("jMenuItem14");

    jMenu5.setText("jMenu5");

    jMenuItem19.setText("jMenuItem19");

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jToolBar1.setRollover(true);

    tool_btn_new.setText("New");
    tool_btn_new.setFocusable(false);
    tool_btn_new.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    tool_btn_new.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tool_btn_new.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tool_btn_newActionPerformed(evt);
      }
    });
    jToolBar1.add(tool_btn_new);
    jToolBar1.add(jSeparator6);

    tool_open_file.setText("Open file");
    tool_open_file.setFocusable(false);
    tool_open_file.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    tool_open_file.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tool_open_file.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tool_open_fileActionPerformed(evt);
      }
    });
    jToolBar1.add(tool_open_file);

    tool_open_project.setText("Open project");
    tool_open_project.setFocusable(false);
    tool_open_project.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    tool_open_project.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tool_open_project.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tool_open_projectActionPerformed(evt);
      }
    });
    jToolBar1.add(tool_open_project);
    jToolBar1.add(jSeparator7);

    tool_save.setText("Save");
    tool_save.setFocusable(false);
    tool_save.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    tool_save.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tool_save.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tool_saveActionPerformed(evt);
      }
    });
    jToolBar1.add(tool_save);

    tool_save_as.setText("Save As");
    tool_save_as.setFocusable(false);
    tool_save_as.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    tool_save_as.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tool_save_as.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tool_save_asActionPerformed(evt);
      }
    });
    jToolBar1.add(tool_save_as);

    tool_save_all.setText("Save All");
    tool_save_all.setFocusable(false);
    tool_save_all.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    tool_save_all.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tool_save_all.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tool_save_allActionPerformed(evt);
      }
    });
    jToolBar1.add(tool_save_all);
    jToolBar1.add(jSeparator8);

    jLabel2.setFont(new java.awt.Font("sansserif", 1, 13)); // NOI18N
    jLabel2.setText("Project name:  ");
    jToolBar1.add(jLabel2);

    tf_project_name.setPreferredSize(new java.awt.Dimension(200, 29));
    tf_project_name.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        tf_project_nameKeyTyped(evt);
      }
    });
    jToolBar1.add(tf_project_name);
    jToolBar1.add(jSeparator10);

    tool_build.setText("Build");
    tool_build.setFocusable(false);
    tool_build.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    tool_build.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tool_build.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tool_buildActionPerformed(evt);
      }
    });
    jToolBar1.add(tool_build);

    tool_run.setText("Run");
    tool_run.setFocusable(false);
    tool_run.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    tool_run.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tool_run.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tool_runActionPerformed(evt);
      }
    });
    jToolBar1.add(tool_run);
    jToolBar1.add(jSeparator9);

    tool_tree.setText("Project files");
    tool_tree.setFocusable(false);
    tool_tree.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    tool_tree.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tool_tree.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tool_treeActionPerformed(evt);
      }
    });
    jToolBar1.add(tool_tree);

    javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
    desktop.setLayout(desktopLayout);
    desktopLayout.setHorizontalGroup(
      desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    desktopLayout.setVerticalGroup(
      desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 482, Short.MAX_VALUE)
    );

    jMenu1.setText("File");

    menu_item_new_entity.setText("New entity");
    menu_item_new_entity.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_new_entityActionPerformed(evt);
      }
    });
    jMenu1.add(menu_item_new_entity);
    jMenu1.add(jSeparator1);

    jMenuItem2.setText("Open project");
    jMenuItem2.setToolTipText("");
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem2ActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem2);

    menu_item_open_file.setText("Open file");
    menu_item_open_file.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_open_fileActionPerformed(evt);
      }
    });
    jMenu1.add(menu_item_open_file);
    jMenu1.add(jSeparator3);

    menu_recent_files.setText("Recent files");
    jMenu1.add(menu_recent_files);
    jMenu1.add(jSeparator2);

    menu_item_save.setText("Save");
    menu_item_save.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_saveActionPerformed(evt);
      }
    });
    jMenu1.add(menu_item_save);

    menu_item_save_as.setText("Save As");
    menu_item_save_as.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_save_asActionPerformed(evt);
      }
    });
    jMenu1.add(menu_item_save_as);

    menu_item_save_all.setText("Save All");
    menu_item_save_all.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_save_allActionPerformed(evt);
      }
    });
    jMenu1.add(menu_item_save_all);
    jMenu1.add(jSeparator4);

    menu_item_export_html.setText("Export as HTML");
    menu_item_export_html.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_export_htmlActionPerformed(evt);
      }
    });
    jMenu1.add(menu_item_export_html);
    jMenu1.add(jSeparator5);

    menu_close.setText("Close");
    menu_close.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_closeActionPerformed(evt);
      }
    });
    jMenu1.add(menu_close);

    jMenuBar1.add(jMenu1);

    jMenu2.setText("View");

    menu_item_project_files.setText("Project files");
    menu_item_project_files.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_project_filesActionPerformed(evt);
      }
    });
    jMenu2.add(menu_item_project_files);

    menu_item_project_info.setText("Project info");
    menu_item_project_info.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_project_infoActionPerformed(evt);
      }
    });
    jMenu2.add(menu_item_project_info);

    jMenuBar1.add(jMenu2);

    jMenu6.setText("Execute");

    jMenuItem18.setText("Build");
    jMenu6.add(jMenuItem18);

    menu_item_run.setText("Run");
    menu_item_run.setToolTipText("");
    menu_item_run.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_runActionPerformed(evt);
      }
    });
    jMenu6.add(menu_item_run);

    jMenuBar1.add(jMenu6);

    jMenu7.setText("Options");

    jMenu8.setText("Preview");

    menu_item_live_edit.setText("Allow live edit");
    menu_item_live_edit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_live_editActionPerformed(evt);
      }
    });
    jMenu8.add(menu_item_live_edit);

    jMenu7.add(jMenu8);

    jMenuBar1.add(jMenu7);

    jMenu4.setText("Window");

    menu_item_minimize_all.setText("Minimize all");
    menu_item_minimize_all.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_minimize_allActionPerformed(evt);
      }
    });
    jMenu4.add(menu_item_minimize_all);

    menu_item_restore_all.setText("Restore all");
    menu_item_restore_all.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_restore_allActionPerformed(evt);
      }
    });
    jMenu4.add(menu_item_restore_all);
    jMenu4.add(jSeparator11);

    menu_item_close_editors.setText("Close editors");
    menu_item_close_editors.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_close_editorsActionPerformed(evt);
      }
    });
    jMenu4.add(menu_item_close_editors);

    menu_item_close_previews.setText("Close previews");
    menu_item_close_previews.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_close_previewsActionPerformed(evt);
      }
    });
    jMenu4.add(menu_item_close_previews);

    menu_item_close_files.setText("Close files");
    menu_item_close_files.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_close_filesActionPerformed(evt);
      }
    });
    jMenu4.add(menu_item_close_files);
    jMenu4.add(jSeparator12);

    menu_item_close_active.setText("Close active");
    menu_item_close_active.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_close_activeActionPerformed(evt);
      }
    });
    jMenu4.add(menu_item_close_active);

    jMenuBar1.add(jMenu4);

    jMenu9.setText("Help");

    menu_item_about.setText("About");
    menu_item_about.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menu_item_aboutActionPerformed(evt);
      }
    });
    jMenu9.add(menu_item_about);

    jMenuBar1.add(jMenu9);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
      .addComponent(desktop)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(desktop))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void tool_btn_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_btn_newActionPerformed
		EntityCreator ec = new EntityCreator();
		ec.setBounds((int) (desktop.getWidth() * (50 / 100.0)), (int) (desktop.getHeight() * (50 / 100.0)), ec.getWidth(), ec.getHeight());
		desktop.add(ec);
  }//GEN-LAST:event_tool_btn_newActionPerformed

  private void menu_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_closeActionPerformed
		this.dispose();
  }//GEN-LAST:event_menu_closeActionPerformed

  private void tool_runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_runActionPerformed
		JInternalFrame active = desktop.getSelectedFrame();
		if (active == null) {
			return;
		}

		if (active instanceof ProjectFiles || active instanceof PreviewBrowser) {
			return;
		}

		Editor editor = (Editor) active;
		String ext = editor.getExtension();
		String text = editor.getText();
		PreviewBrowser pb = new PreviewBrowser(ext, text);
		pb.setBounds((int) (desktop.getWidth() * (25 / 100.0)), (int) (desktop.getHeight() * (5 / 100.0)), pb.getWidth(), pb.getHeight());
		desktop.add(pb);
  }//GEN-LAST:event_tool_runActionPerformed

  private void tool_treeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_treeActionPerformed
		if (!ProjectFiles.isDead()) {
			return;
		}

		ProjectFiles pf = ProjectFiles.tree();
		pf.setBounds((int) (desktop.getWidth() * (5 / 100.0)), (int) (desktop.getHeight() * (5 / 100.0)), pf.getWidth(), pf.getHeight());
		desktop.add(pf);
  }//GEN-LAST:event_tool_treeActionPerformed

  private void menu_item_new_entityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_new_entityActionPerformed
		tool_btn_newActionPerformed(evt);
  }//GEN-LAST:event_menu_item_new_entityActionPerformed

  private void menu_item_runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_runActionPerformed
		tool_runActionPerformed(evt);
  }//GEN-LAST:event_menu_item_runActionPerformed

  private void menu_item_project_filesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_project_filesActionPerformed
		tool_treeActionPerformed(evt);
  }//GEN-LAST:event_menu_item_project_filesActionPerformed

  private void tool_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_saveActionPerformed
		JInternalFrame active = desktop.getSelectedFrame();

		if (!(active instanceof Editor)) {
			return;
		}

		Editor ed = (Editor) active;
		String path = ed.getPath();
		String text = ed.getText();
		Project.writeFile(path, text);
		Project.addToProjectIfNotThere(path);
		ed.resetModified();
		ed.setAction("wrote the buffer to file");

		String recent = Project.getTemp_dir();
		Project.addPathToRecentFiles(recent, path);
  }//GEN-LAST:event_tool_saveActionPerformed

  private void menu_item_live_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_live_editActionPerformed
		if (menu_item_live_edit.isSelected()) {
			live_edit = true;
		} else {
			live_edit = false;
		}

		JInternalFrame[] windows = desktop.getAllFrames();
		for (int i = 0; i < windows.length; i++) {
			JInternalFrame win = windows[i];
			if (win instanceof PreviewBrowser) {
				PreviewBrowser pb = (PreviewBrowser) win;
				pb.setEditable(live_edit);
			}
		}

  }//GEN-LAST:event_menu_item_live_editActionPerformed

  private void tool_save_asActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_save_asActionPerformed

		JInternalFrame active = desktop.getSelectedFrame();

		if (!(active instanceof Editor)) {
			return;
		}

		Editor ed = (Editor) active;

		JFileChooser fileChooser = new JFileChooser(new File(Project.getRoot()));
		fileChooser.setDialogTitle("Specify a file to save");

		FileNameExtensionFilter md_filter = new FileNameExtensionFilter("Markdown file", "md");
		FileNameExtensionFilter html_filter = new FileNameExtensionFilter("HTML file", "html");
		FileNameExtensionFilter txt_filter = new FileNameExtensionFilter("Text file", "txt");

		fileChooser.setFileFilter(html_filter);
		fileChooser.setFileFilter(md_filter);
		fileChooser.setFileFilter(txt_filter);
		int userSelection = fileChooser.showSaveDialog(this);

		if (userSelection == JFileChooser.APPROVE_OPTION) {
			File fileToSave = fileChooser.getSelectedFile();
			Project.writeFile(fileToSave.getAbsolutePath(), ed.getText());

			String recent = Project.getTemp_dir();
			Project.addPathToRecentFiles(recent, fileToSave.getPath());
		}
  }//GEN-LAST:event_tool_save_asActionPerformed

  private void menu_item_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_saveActionPerformed
		tool_saveActionPerformed(evt);
  }//GEN-LAST:event_menu_item_saveActionPerformed

  private void menu_item_save_asActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_save_asActionPerformed
		tool_save_asActionPerformed(evt);
  }//GEN-LAST:event_menu_item_save_asActionPerformed

  private void tool_open_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_open_fileActionPerformed
		Project.getFiles().clear();
		
		JFileChooser fileChooser = new JFileChooser(new File(Project.getRoot()));
		fileChooser.setDialogTitle("Select file to open");

		FileNameExtensionFilter md_filter = new FileNameExtensionFilter("Markdown file", "md");
		FileNameExtensionFilter html_filter = new FileNameExtensionFilter("HTML file", "html");
		FileNameExtensionFilter txt_filter = new FileNameExtensionFilter("Text file", "txt");

		fileChooser.setFileFilter(html_filter);
		fileChooser.setFileFilter(md_filter);
		fileChooser.setFileFilter(txt_filter);
		int userSelection = fileChooser.showOpenDialog(this);

		if (userSelection == JFileChooser.APPROVE_OPTION) {
			File fileToOpen = fileChooser.getSelectedFile();

			String path = fileToOpen.getPath();
			String name = fileToOpen.getName();
			String[] splits = name.split("\\+");

			String title = splits[0];
			String author = "author";
			if (splits.length > 1) {
				author = splits[0];
				title = splits[1];
			}

			String contents = Project.readFile(path);
			Editor ed = new Editor(title, contents, path, author, Project.getExtension(path));
			ed.setAction("Open a file from the system ");
			Project.addToProjectIfNotThere(path);
			ed.setBounds(desktop.getWidth() / 4, desktop.getHeight() / 4, ed.getWidth(), ed.getHeight());
			desktop.add(ed);

			String recent = Project.getTemp_dir();
			Project.addPathToRecentFiles(recent, path);
		}
  }//GEN-LAST:event_tool_open_fileActionPerformed

  private void menu_item_open_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_open_fileActionPerformed
		tool_open_fileActionPerformed(evt);
  }//GEN-LAST:event_menu_item_open_fileActionPerformed

  private void tf_project_nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_project_nameKeyTyped
		String name = tf_project_name.getText();
		Project.setProjectName(name);
  }//GEN-LAST:event_tf_project_nameKeyTyped

  private void menu_item_project_infoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_project_infoActionPerformed
		String project_name = Project.getProjectName();
		String text = "";
		ArrayList<String> files = Project.getFiles();

		for (int i = 0; i < files.size(); i++) {
			String file = files.get(i);
			text += "\t" + i + ". " + file + "\n";
		}

		text = "Project name: " + project_name + "\n" + text;

		JOptionPane.showMessageDialog(desktop, text);
  }//GEN-LAST:event_menu_item_project_infoActionPerformed

  private void menu_item_minimize_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_minimize_allActionPerformed
		JInternalFrame[] windows = desktop.getAllFrames();
		for (int i = 0; i < windows.length; i++) {
			JInternalFrame window = windows[i];
			try {
				window.setIcon(true);
			} catch (Exception ex) {
				Logger.getLogger(CollabMd.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
  }//GEN-LAST:event_menu_item_minimize_allActionPerformed

  private void menu_item_restore_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_restore_allActionPerformed
		JInternalFrame[] windows = desktop.getAllFrames();
		for (int i = 0; i < windows.length; i++) {
			JInternalFrame window = windows[i];
			try {
				window.setIcon(false);
			} catch (Exception ex) {
				Logger.getLogger(CollabMd.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
  }//GEN-LAST:event_menu_item_restore_allActionPerformed

  private void menu_item_close_editorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_close_editorsActionPerformed
		JInternalFrame[] windows = desktop.getAllFrames();
		for (int i = 0; i < windows.length; i++) {
			JInternalFrame window = windows[i];
			if (window instanceof Editor) {
				try {
					window.setClosed(true);
				} catch (Exception ex) {
					Logger.getLogger(CollabMd.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		}
  }//GEN-LAST:event_menu_item_close_editorsActionPerformed

  private void menu_item_close_previewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_close_previewsActionPerformed
		JInternalFrame[] windows = desktop.getAllFrames();
		for (int i = 0; i < windows.length; i++) {
			JInternalFrame window = windows[i];
			if (window instanceof PreviewBrowser) {
				try {
					window.setClosed(true);
				} catch (Exception ex) {
					Logger.getLogger(CollabMd.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		}
  }//GEN-LAST:event_menu_item_close_previewsActionPerformed

  private void menu_item_close_filesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_close_filesActionPerformed
		if (ProjectFiles.isDead() == false) {
			ProjectFiles pf = ProjectFiles.tree();
			try {
				pf.setClosed(true);
			} catch (Exception ex) {
				Logger.getLogger(CollabMd.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
  }//GEN-LAST:event_menu_item_close_filesActionPerformed

  private void menu_item_close_activeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_close_activeActionPerformed
		// TODO add your handling code here:
		JInternalFrame window = desktop.getSelectedFrame();
		try {
			window.setClosed(true);
		} catch (Exception ex) {
			Logger.getLogger(CollabMd.class.getName()).log(Level.SEVERE, null, ex);
		}
  }//GEN-LAST:event_menu_item_close_activeActionPerformed

  private void tool_save_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_save_allActionPerformed
		JInternalFrame[] windows = desktop.getAllFrames();

		for (JInternalFrame window : windows) {
			if (window instanceof Editor) {
				Editor ed = (Editor) window;
				try {
					ed.setSelected(true);
					tool_saveActionPerformed(evt);
					ed.setAction("Wrote buffer to file, by clicking save all");

				} catch (Exception ex) {
					Logger.getLogger(CollabMd.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		}

		String project_name = Project.getProjectName();
		if (project_name.isEmpty() || project_name.isBlank()) {
			JOptionPane.showMessageDialog(desktop, "Unable to create project file. Try giving your project a name because it is missing one");
			return;
		}

		String project_path = Project.getRoot() + "/" + project_name + ".cmdpr";
		Project.createFileIfNotExist(project_path);
		String txt = "";
		for (String str : Project.getFiles()) {
			txt += str + "\n";
		}
		Project.writeFile(project_path, txt);
  }//GEN-LAST:event_tool_save_allActionPerformed

  private void menu_item_save_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_save_allActionPerformed
		tool_save_allActionPerformed(evt);
  }//GEN-LAST:event_menu_item_save_allActionPerformed

  private void menu_item_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_aboutActionPerformed
		String author = "";
		author += "													 **CollabMD**\n";
		author += "										Created by Gama Sibusiso						 \n";
		author += "													version 0.0.1									 \n";

		JOptionPane.showMessageDialog(desktop, author);
  }//GEN-LAST:event_menu_item_aboutActionPerformed

  private void tool_open_projectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_open_projectActionPerformed
		Project.getFiles().clear();
		JFileChooser fileChooser = new JFileChooser(new File(Project.getRoot()));
		fileChooser.setDialogTitle("Select file to open");

		FileNameExtensionFilter pr_filer = new FileNameExtensionFilter("Project file", "cmdpr");

		fileChooser.setFileFilter(pr_filer);
		int userSelection = fileChooser.showOpenDialog(this);

		if (userSelection == JFileChooser.APPROVE_OPTION) {
			File file = fileChooser.getSelectedFile();
			String text = Project.readFile(file.getAbsolutePath());

			String project_name = file.getName();

			int index = project_name.indexOf(".");
			project_name = project_name.substring(0, index);

			tf_project_name.setText(project_name);
			Project.setProjectName(project_name);

			for (String line : text.split("\n")) {
				String path = line;
				File fileToOpen = new File(path);
				String name = fileToOpen.getName();
				String[] splits = name.split("\\+");

				String title = splits[0];
				String author = "author";
				if (splits.length > 1) {
					author = splits[0];
					title = splits[1];
				}

				String contents = Project.readFile(path);
				Editor ed = new Editor(title, contents, path, author, Project.getExtension(path));
				ed.setBounds(desktop.getWidth() / 4, desktop.getHeight() / 4, ed.getWidth(), ed.getHeight());
				ed.setAction("Openned a file from project files window, as part of the project files");
				Project.addToProjectIfNotThere(path);
				desktop.add(ed);

				String recent = Project.getTemp_dir();
				Project.addPathToRecentFiles(recent, fileToOpen.getAbsolutePath());
			}
		}
  }//GEN-LAST:event_tool_open_projectActionPerformed

  private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
		tool_open_projectActionPerformed(evt);
  }//GEN-LAST:event_jMenuItem2ActionPerformed

  private void tool_buildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tool_buildActionPerformed
		String project_name = Project.getProjectName();
		String project_path = Project.getRoot() + "/" + project_name + ".cmdpr";

		File file = new File(project_path);
		System.out.println("Build: " + project_path);
		if (!file.exists()) {
			JOptionPane.showMessageDialog(desktop, "Failed to build project: Project is not yet saved or created. Try the save all menu or tool button");
			return;
		}

		String text = Project.readFile(file.getAbsolutePath());
		for (String line : text.split("\n")) {
			File fp = new File(line);
			String name = fp.getName().toLowerCase();

			if (name.indexOf("index") >= 0 || name.indexOf("main") >= 0) {
				String txt = Project.readFile(line);
				project.setText(txt);
				txt = project.transformLines();
				if (project.isSuccess()) {
					JOptionPane.showMessageDialog(desktop, "Project builds successfully. Ready for export");
					exportText = txt;
					break;
				} else{
					JOptionPane.showMessageDialog(desktop, "Error, failed to build. Check your files for errors");
				}
			}
		}
  }//GEN-LAST:event_tool_buildActionPerformed

  private void menu_item_export_htmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_export_htmlActionPerformed

		if (exportText.isEmpty() || exportText.isBlank()) {
			JOptionPane.showMessageDialog(desktop, "Error exprorting: Project is not built yet.");
			return;
		}
		
		JFileChooser fileChooser = new JFileChooser(new File(Project.getRoot()));
		fileChooser.setDialogTitle("Specify a file to save");

		FileNameExtensionFilter html_filter = new FileNameExtensionFilter("HTML file", "html");

		fileChooser.setFileFilter(html_filter);
		int userSelection = fileChooser.showSaveDialog(this);

		if (userSelection == JFileChooser.APPROVE_OPTION) {
			File fileToSave = fileChooser.getSelectedFile();
			Project.writeFile(fileToSave.getAbsolutePath(), exportText);
			JOptionPane.showMessageDialog(desktop, "Success exprorting: Project is saved at `" + fileToSave.getAbsolutePath() + "`");
		}
		
  }//GEN-LAST:event_menu_item_export_htmlActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(CollabMd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(CollabMd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(CollabMd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(CollabMd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new CollabMd().setVisible(true);
			}
		});
	}

	private boolean live_edit;
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JDesktopPane desktop;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenu jMenu4;
  private javax.swing.JMenu jMenu5;
  private javax.swing.JMenu jMenu6;
  private javax.swing.JMenu jMenu7;
  private javax.swing.JMenu jMenu8;
  private javax.swing.JMenu jMenu9;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem14;
  private javax.swing.JMenuItem jMenuItem18;
  private javax.swing.JMenuItem jMenuItem19;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JToolBar.Separator jSeparator10;
  private javax.swing.JPopupMenu.Separator jSeparator11;
  private javax.swing.JPopupMenu.Separator jSeparator12;
  private javax.swing.JPopupMenu.Separator jSeparator2;
  private javax.swing.JPopupMenu.Separator jSeparator3;
  private javax.swing.JPopupMenu.Separator jSeparator4;
  private javax.swing.JPopupMenu.Separator jSeparator5;
  private javax.swing.JToolBar.Separator jSeparator6;
  private javax.swing.JToolBar.Separator jSeparator7;
  private javax.swing.JToolBar.Separator jSeparator8;
  private javax.swing.JToolBar.Separator jSeparator9;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JMenuItem menu_close;
  private javax.swing.JMenuItem menu_item_about;
  private javax.swing.JMenuItem menu_item_close_active;
  private javax.swing.JMenuItem menu_item_close_editors;
  private javax.swing.JMenuItem menu_item_close_files;
  private javax.swing.JMenuItem menu_item_close_previews;
  private javax.swing.JMenuItem menu_item_export_html;
  private javax.swing.JCheckBoxMenuItem menu_item_live_edit;
  private javax.swing.JMenuItem menu_item_minimize_all;
  private javax.swing.JMenuItem menu_item_new_entity;
  private javax.swing.JMenuItem menu_item_open_file;
  private javax.swing.JMenuItem menu_item_project_files;
  private javax.swing.JMenuItem menu_item_project_info;
  private javax.swing.JMenuItem menu_item_restore_all;
  private javax.swing.JMenuItem menu_item_run;
  private javax.swing.JMenuItem menu_item_save;
  private javax.swing.JMenuItem menu_item_save_all;
  private javax.swing.JMenuItem menu_item_save_as;
  private javax.swing.JMenu menu_recent_files;
  private javax.swing.JTextField tf_project_name;
  private javax.swing.JButton tool_btn_new;
  private javax.swing.JButton tool_build;
  private javax.swing.JButton tool_open_file;
  private javax.swing.JButton tool_open_project;
  private javax.swing.JButton tool_run;
  private javax.swing.JButton tool_save;
  private javax.swing.JButton tool_save_all;
  private javax.swing.JButton tool_save_as;
  private javax.swing.JButton tool_tree;
  // End of variables declaration//GEN-END:variables
}
